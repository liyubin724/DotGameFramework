
LuaNetType = {
    Game = 1,
    Battle = 2,
    Login = 3,
}

LuaNetManager = Class(function(self)
    self.netClientDic = {}
    self.msgEncoder = LuaNetMsgEncoder()
end)

----private----
function LuaNetManager:OnNetError(netType,errCode,detail)
    LuaGameManager.GetInstance():GetEventMgr():Trigger(LuaEventCode.NetErrorEvent,netType,errCode,detail)
end

function LuaNetManager:OnNetConnected(netType,isFirstConnect)
    LuaGameManager.GetInstance():GetEventMgr():Trigger(LuaEventCode.NetConnectEvent,netType,isFirstConnect)
end

function LuaNetManager:OnNetNotify(netType,msgID,dataBytes,timestamp)
    local data = cjson.decode(dataBytes)
    LuaGameManager.GetInstance():GetEventMgr():Trigger(LuaEventCode.NetNotifyEvent,netType,msgID,data,timestamp)
end

function LuaNetManager:OnNetRequest(netType,msgID,methodID,dataBytes)
    local data = cjson.decode(dataBytes)
    LuaGameManager.GetInstance():GetEventMgr():Trigger(LuaEventCode.NetRequestEvent,netType,msgID,data,timestamp)
end

function LuaNetManager:DoReset()

end

function LuaNetManager:DoDispose()

end

function LuaNetManager:DoUpdate()
    --PerformFunctions.performFunctionInMainThread()
end

----public----
function LuaNetManager:SetMsgHeader(headerStr)
    self.msgEncoder:SetMsgHeader(headerStr)
end

function LuaNetManager:SetMsgCommonData(dataTable)
    self.msgEncoder:SetMsgCommonData(dataTable)
end

function LuaNetManager:Connect(ip,port,netType)
    if not ip or not port then
        --TODO:error
        return nil
    end

    local netClient = self.netClientDic[netType]
    if netClient then
        if netClient:IsValid() and netClient:GetIP() == ip and netClient:GetPort() == port then
            return netClient
        end
        netClient:DoDispose()
        self.netClientDic[netType] = nil
        netClient = nil
    end
    netClient = LuaNetClient(netType,CallbackData(self,LuaNetManager.OnNetConnected),
            CallbackData(self,LuaNetManager.OnNetError),
            CallbackData(self,LuaNetManager.OnNetNotify),
            CallbackData(self,LuaNetManager.OnNetRequest))
    self.netClientDic[netType] = netClient
    netClient:Connect(ip,port)

    return netClient
end

function LuaNetManager:RequestWithTable(msgID,dataTable,callback,netType)
    local dataStr = self.msgEncoder:EncodeMsg(dataTable)
    self:RequestWithStr(msgID,dataStr,callback,netType)
end

function LuaNetManager:RequestWithStr(msgID,dataStr,callback,netType)
    netType = netType or LuaNetType.Game

    local netClient = self.netClientDic[netType]
    if netClient and netClient:IsValid() then
        netClient:Request(msgID,dataStr,function(requestIndex,errCode,dataBytes,timestamp)
            if errCode == 0 then
                if dataBytes then
                    local status, data = pcall(cjson.decode,dataBytes)
                    if status then
                        LuaGameManager.GetInstance():GetEventMgr():Trigger(LuaEventCode.NetRequestResponseEvent,data)
                        callback(nil,data)
                    else
                        callback(nil,nil)
                    end
                else
                    callback(nil,nil)
                end
            else
                callback(errCode,nil)
            end
        end)
    end
end

function LuaNetManager:Response(msgID,err,dataBytes,netType)
    netType = netType or LuaNetType.Game
    local netClient = self.netClientDic[netType]
    if netClient and netClient:IsValid() then
        netClient:Response(msgID,NetClientCompressType.None,err,dataBytes)
    end
end

function LuaNetManager:Notify(msgID,dataBytes,netType)
    netType = netType or LuaNetType.Game
    local netClient = self.netClientDic[netType]
    if netClient and netClient:IsValid() then
        netClient:Notify(msgID,dataBytes)
    end
end

function LuaNetManager:IsValid(netType)
    if not netType then
        return false
    end
    local netClient = self.netClientDic[netType]
    if netClient then
        return netClient:IsValid()
    end
    return false
end

function LuaNetManager:Close(netType)
    if not netType then
        --TODO err
        return
    end

    local netClient = self.netClientDic[netType]
    if netClient then
        netClient:Close()
        self.netClientDic[netType] = nil
    end
end




PoolItem = Class(function (self)

end)

function PoolItem:Reset()

end


Pool = {}
Pool.__index = Pool

function Pool.Create(newObj,poolSize)
    poolSize = poolSize or 5
    assert(newObj, "A function that returns new objects for the pool is required.")
    local p = {}
    for _ = 1,poolSize do
        table.insert(p,newObj())
    end
    return setmetatable({freeObjects = p,newObject = newObj},Pool)
end

function Pool:GetItem()
    if #self.freeObjects == 0 then
        return self.newObject()
    else
        return table.remove(self.freeObjects)
    end
end

function Pool:ReleaseItem(item)
    assert(item, "An object to be freed must be passed.")
    item:Reset()
    table.insert(self.freeObjects,item)
end

function Pool:Clear()
    for k in pairs(self.freeObjects) do
        self.freeObjects[k] = nil
    end
end

LuaTimerState = {
    Normal = 0,
    Running = 1,
    Paused = 2,
    Finished = 3,
}

LuaTimer = Class(function(self,interval,total,startCallback,intervalCallback,endCallback,userData)

    self.interval = interval
    self.total = total
    self.startCallback = startCallback
    self.intervalCallback = intervalCallback
    self.endCallback = endCallback
    self.userData = userData

    self.state = LuaTimerState.Normal
    self.isStarted = false
end)

----public----
function LuaTimer:GetInterval()
    return self.timerInterval
end

function LuaTimer:GetTotal()
    return self.timerTotal
end

function LuaTimer:GetStartCallback()
    return self.startCallback
end

function LuaTimer:GetIntervalCallback()
    return self.intervalCallback
end

function LuaTimer:GetEndCallback()
    return self.endCallback
end

function LuaTimer:GetUserData()
    return self.userData
end

function LuaTimer:SetUserData(uData)
    self.userData = uData
end

function LuaTimer:Start()
    self.remainTime = self.total
    self.elapseTime = 0
    self.isPaused = false
    self.state = LuaTimerState.Running
    self.isStarted = true

    LuaGameManager.GetInstance():GetTimerMgr():AddTimer(self)

    if self.startCallback then
        self.startCallback:Invoke(self.userData)
    end
end

function LuaTimer:Stop()
    if self.isStarted then
        self.state = LuaTimerState.Finished
    else

    end
end

function LuaTimer:Pause()
    if self.isStarted then
        self.state = LuaTimerState.Paused
    else

    end
end

function LuaTimer:Resume()
    if self.isStarted and self.state == TimerState.Paused then
        self.state = LuaTimerState.Running
    else

    end
end

function LuaTimer:GetState()
    return self.state
end

----private----
function LuaTimer:DoUpdate(deltaTime)
    if self.state ~= LuaTimerState.Running then
        return
    end

    self.elapseTime = self.elapseTime+deltaTime
    if self.elapseTime >= self.interval then
        self.elapseTime = self.elapseTime - self.interval
        if self.intervalCallback then
            self.intervalCallback:Invoke(self.userData)
        end
    end

    if self.total >0 then
        self.remainTime = self.remainTime - deltaTime
        if self.remainTime<=0 then
            if self.endCallback then
                self.endCallback:Invoke(self.userData)
            end

            self.state = LuaTimerState.Finished
        end
    end
end

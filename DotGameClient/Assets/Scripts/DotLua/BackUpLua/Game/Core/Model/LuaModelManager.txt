LuaModelManager = Class(function(self)
    self.userData = {}
    self.modelEvents = nil
    self.eventMgr = LuaGameManager.GetInstance():GetEventMgr()

    self.eventMgr:Register(LuaEventCode.NetRequestResponseEvent,CallbackData(self,LuaModelManager.MergeData))
end)

LuaModelManager.LuaModelNilValue = "$NULL"
LuaModelManager.LuaModelResCodeName = "resCode"
LuaModelManager.LuaModelResSuccessValue = 200
LuaModelManager.LuaModelPrName = "pr"
LuaModelManager.LuaModelDiffName = "diff"
LuaModelManager.LuaModelArraySuffix = "_list"

LuaModelManager.LuaModelEventName = "EventID"

----public----
function LuaModelManager:GetDataByKeys(...)
    local keyLen = select("#",...)
    if not keyLen or keyLen == 0 then
        return nil
    end
    local resultData = self.userData
    for i = 1, keyLen do
        local key = select(i,...)
        if not resultData or type(resultData) ~= "table" then
            return nil
        end
        resultData = resultData[key]
    end

    return resultData
end

function LuaModelManager:SetModelEvents(events)
    self.modelEvents = events
end

----private----
function LuaModelManager:MergeData(dataTable)
    if not dataTable then
        ----TODO error
        return
    end
    --print("LuaModelManager::MergeData->dataTable = "..table.tostring(dataTable))
    local resCode = dataTable[LuaModelManager.LuaModelResCodeName]
    if not resCode or resCode ~= LuaModelManager.LuaModelResSuccessValue then
        ----TODO error
        return
    end

    for k, v in pairs(dataTable) do
        if k == LuaModelManager.LuaModelPrName then
            self:ReplaceData(v,self.userData,self.modelEvents)
        elseif k == LuaModelManager.LuaModelDiffName then
            self:MergeDiffData(v,self.userData,self.modelEvents)
        end
    end
end

function LuaModelManager:ReplaceData(replaceTable,userTable,events)
    for k, v in pairs(replaceTable) do
        userTable[k] = v

        if events and events[k] then
            local eventID = events[k][LuaModelManager.LuaModelEventName]
            if eventID then
                self.eventMgr:Trigger(eventID)
            end
        end

    end
end

function LuaModelManager:MergeDiffData(mergeTable,userTable,events)
    for k, v in pairs(mergeTable) do
        if type(v) == "table" then
            local listStartIndex,_ = string.find(k,LuaModelManager.LuaModelArraySuffix,1,true)
            if  listStartIndex and listStartIndex > 1 then
                userTable[k] = v
            else
                if not userTable[k] then
                    userTable[k] = {}
                end
                local childEvents = nil
                if events and events[k] then
                    childEvents = events[k]
                end
                self:MergeDiffData(v,userTable[k],childEvents)
            end
        else
            if v == LuaModelManager.LuaModelNilValue then
                userTable[k] = nil
            else
                userTable[k] = v
            end
        end

        if events and events[k] then
            local eventID = events[k][LuaModelManager.LuaModelEventName]
            if eventID then
                self.eventMgr:Trigger(eventID)
            end
        end

    end
end

function LuaModelManager:DoReset()
    self.userData = {}
end

function LuaModelManager:DoDispose()
    self.eventMgr:Unregister(LuaEventCode.NetRequestResponseEvent,CallbackData(self,LuaModelManager.MergeData))
    self.eventMgr = nil
    self:DoReset()
end


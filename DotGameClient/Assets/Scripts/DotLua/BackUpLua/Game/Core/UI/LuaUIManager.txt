local CS_GameObjectHandler = CS.Game.Core.Loader.GameObjectHandler
local CS_UnityObject = CS.UnityEngine.Object
----public----
LuaUIPanelLevel = {
    Bottom = 0,
    Main = 1,
    Default = 2,
    Pop = 3,
    Top = 4,
}

----public----
LuaUIPanelRelation = {
    Independent = 0,
    Exclusion = 1,
    Hidden = 2,
}

----private
LuaUIPanelState = {
    None = 0,
    Loading = 1,
    Showing = 2,
    Hidden = 4,
    Destroying = 5,
}

LuaPanelData = Class(function(self)
    self:Reset()
end)

function LuaPanelData:Reset()
    self.index = -1;
    self.name = nil
    self.state = LuaUIPanelState.None
    self.path = nil
    self.panel = nil
    self.level = LuaUIPanelLevel.Default
    self.relation = LuaUIPanelRelation.Independent
    self.finishCallback = nil
    self.openData = nil
    self.closeData = nil
    self.hideByName = nil
    self.destroyTimeLeft = 0
end


LuaUIManager = Class(function (self)
    self.levelTransforms = {}

    self.destroyTimerTick = 5
    self.destroyTimer = LuaTimer(self.destroyTimerTick,0,nil,CallbackData(self,LuaUIManager.OnDestroyTimerTick),nil,nil)

    self.loadingPanelData = nil
    self.loadingPanelDataList = {}
    self.destroyPanelDataList = {}

    self.panelDataInLevel = {}
    for i = LuaUIPanelLevel.Bottom ,LuaUIPanelLevel.Top do
        self.panelDataInLevel[i] = {}
    end
end)

---public---
function LuaUIManager:HiddenLevel(level)

end

function LuaUIManager:ShowLevel(level)

end

function LuaUIManager:CloseLevel(level)

end

function LuaUIManager:OpenPanel(name,path,level,relation,openData,closeData,finishCallback)
    local panelData = LuaPanelData()
    panelData.name = name
    panelData.path = path
    panelData.level = level
    panelData.relation = relation
    panelData.openData = openData
    panelData.closeData = closeData
    panelData.finishCallback = finishCallback

    if self.loadingPanelData then
        table.insert(self.loadingPanelDataList,panelData)
    else
        self:OpenPanelByData(panelData)
    end
end

function LuaUIManager:ClosePanel(name,level)
    if not name or #name == 0 or not level then
        --TODO:error
        return
    end
    if self.loadingPanelData and self.loadingPanelData.name == name and self.loadingPanelData.level == level then
        LuaGameManager.GetInstance():GetLoaderMgr():CancelLoad(self.loadingPanelData.index)
        self.loadingPanelData = nil
        return
    end
    if self.waitingShowPanelDataList and #self.waitingShowPanelDataList > 0 then
        for i = 1,#self.waitingShowPanelDataList do
            if self.waitingShowPanelDataList[i].name == name and self.waitingShowPanelDataList[i].level == level then
                table.remove(self.waitingShowPanelDataList,i)
                return
            end
        end
    end
    local panels = self.panelDataInLevel[level]
    if #panels > 0 then
        local panelDataIndex = 0
        for i = 1,#panels do
            if panels[i].name == name then
                panelDataIndex = i
                break
            end
        end

        if panelDataIndex > 1 then
            local prePanelData = panels[panelDataIndex -1]
            prePanelData.openData = panelData.closeData
            self:ShowPanel(prePanelData)
        end

        if panelDataIndex <= #panels then
            local closeLen = #panels - panelDataIndex+1
            for i = 1,closeLen do
                self:ClosePanelIgnoreOtherByData(panels[panelDataIndex])
            end
        end
    end
end

function LuaUIManager:PanelIsActive(panelName,level)
    local panels = self.panelDataInLevel[level]
    if #panels >0 then
        local panelDataIndex = 0
        for i = 1,#panels do
            if panels[i].name == panelName then
                panelDataIndex = i
                break
            end
        end
        if panelDataIndex > 0 then 
            local panelData = panels[panelDataIndex]
            if panelData then
                return panelData.state == LuaUIPanelState.Showing
            end
        end
    end
    return false
end

---private
function LuaUIManager:SetLevelTransform(level,rectTransform)
    self.levelTransforms[level] = rectTransform
end

function LuaUIManager:DoReset()

end

function LuaUIManager:DoDispose()

end

function LuaUIManager:DoUpdate()
    if not self.loadingPanelData and #self.loadingPanelDataList > 0 then
        self:OpenPanelByData(table.remove(self.loadingPanelDataList,1))
    end
end

function LuaUIManager:OpenPanelByData(panelData)
    local panels = self.panelDataInLevel[panelData.level]
    if #panels >0 then
        local panelDataIndex = 0
        for i = 1,#panels do
            if panels[i].name == panelData.name then
                panelDataIndex = i
                break
            end
        end
        if panelDataIndex > 0 then 
            panelData.panel = panels[panelDataIndex].panel
            table.remove(panels,panelDataIndex)
            local len = #panels
            if panelDataIndex <= len then
                for i = 1,len - panelDataIndex +1 do
                    self:ClosePanelIgnoreOtherByData(panels[panelDataIndex])
                end
            end
        end
    end
    if not panelData.panel then 
        if #self.destroyPanelDataList > 0 then 
            for i = 1,#self.destroyPanelDataList do
                if self.destroyPanelDataList[i].path == panelData.path then
                    panelData.panel = self.destroyPanelDataList[i].panel
                    table.remove( self.destroyPanelDataList,i )
                    break
                end
            end
        end
    end
    if panelData.panel then
        self:ShowPanel(panelData)
    else
        self:LoadPanel(panelData)
    end
end

function LuaUIManager:LoadPanel(panelData)
    local loaderMgr = LuaGameManager.GetInstance():GetLoaderMgr()
    local loadingIndex = loaderMgr:LoadAssetAsync(panelData.path,CallbackData(self,LuaUIManager.OnPanelLoadFinish),nil,AssetLoaderPriorityType.High)

    panelData.index = loadingIndex
    panelData.state = LuaUIPanelState.Loading

    self.loadingPanelData = panelData
end

function LuaUIManager:OnPanelLoadFinish(index,path,goObj)
    if self.loadingPanelData and self.loadingPanelData.index == index then 
        local panel = CS_GameObjectHandler.InstantiateUGUIPanel(path,goObj)
        self.loadingPanelData.panel = panel

        self:ShowPanel(self.loadingPanelData)
    end
    self.loadingPanelData = nil
end

function LuaUIManager:ShowPanel(panelData)
    panelData.state = LuaUIPanelState.Showing
    panelData.panel:SetPanelData(panelData)
    panelData.panel:DoShow(panelData.openData)
    panelData.openData = nil

    if panelData.finishCallback and panelData.finishCallback:IsValid() then
        panelData.finishCallback:Invoke(panelData.name,panelData.level,panelData.path)
        panelData.finishCallback = nil
    end

    local panels = self.panelDataInLevel[panelData.level]
    if #panels > 0 then
        if panelData.relation == LuaUIPanelRelation.Exclusion then 
            local len = #panels
            for i = 1,len do
                self:ClosePanelIgnoreOtherByData(panels[1])
            end
        elseif panelData.relation == LuaUIPanelRelation.Hidden then 
            local prePanelData = panels[#panels]
            prePanelData.panel:DoHidden()
            prePanelData.hideByName = panelData.name
        end
    end
    panelData.panel:GetRectTransform():SetParent(self.levelTransforms[panelData.level],false)
    table.insert(panels,panelData)
end

function LuaUIManager:ClosePanelIgnoreOtherByData(panelData)
    if panelData.state == LuaUIPanelState.Showing then
        panelData.panel:DoClose(false)
    elseif panelData.state == LuaUIPanelState.Hidden then
        panelData.panel:DoClose(true)
    end

    self:DeletePanelData(panelData)
end

function LuaUIManager:DeletePanelData(panelData)
    local panels = self.panelDataInLevel[panelData.level]
    for i = 1,#panels do
        if panels[i] == panelData then 
            table.remove(panels,i)
            break
        end
    end

    if panelData.state == LuaUIPanelState.Loading then
        self.loadingPanelData = nil
    elseif panelData.state == LuaUIPanelState.None then
        for i = 1,#self.loadingPanelData do
            if self.loadingPanelData[i] == panelData then
                table.remove(self.loadingPanelData,i)
                break
            end
        end
    end
end

function LuaUIManager:AddPanelToDestroy(panelData)
    panelData.destroyTimeLeft = panelData.panel:GetDestroyDelayTime()
    table.insert(self.destroyPanelDataList,panelData)

    if self.destroyTimer:GetState() ~= LuaTimerState.Running then
        self.destroyTimer:Start()
    end
end

function LuaUIManager:OnDestroyTimerTick()
    for i = #self.destroyPanelDataList, 1,-1 do
        local destroyPanelData = self.destroyPanelDataList[i]
        destroyPanelData.destroyTimeLeft = destroyPanelData.destroyTimeLeft - self.destroyTimerTick
        if destroyPanelData.destroyTimeLeft <=0 then
            CS_UnityObject.Destroy(destroyPanelData.panel:GetGameObject())
            table.remove(self.destroyPanelDataList,i)
        end
    end

    if #self.destroyPanelDataList == 0 then
        self.destroyTimer:Stop()
    end
end



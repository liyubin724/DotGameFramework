BatchManager = Class(function(self)
    self._itemId = 0
    self._itemCount = 0
    self._buttonType = nil
end)

--private func
function BatchManager:DoReset()
    self._itemId = 0
    self._itemCount = 0
    self._buttonType = nil
end

function BatchManager:DoDispose()
    self._itemId = nil
    self._itemCount = nil
    self._buttonType = nil
end

--public func
function BatchManager:InitData(itemId, count, buttonType)
    if not itemId then
        return
    end
    if self._itemId ~= itemId then
        self._itemId = itemId
    end
    self._itemCount = count or 1
    self._buttonType = buttonType
    print("OnReceiveData", itemId, count, buttonType)

    LuaGameManager.GetInstance():GetUIMgr():OpenPanel("BatchPanel",GameConstValue.NameUIBatchPanelPath,LuaUIPanelLevel.Top,LuaUIPanelRelation.Exclusion )
end

function BatchManager:GetItemData()
    local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
    local itemData = configMgr:GetDataByNameAndID("Item", tostring(self._itemId))
    if itemData then
        return itemData
    else
        error("ItemCardCommon->SetData: error id "..self._itemId)
    end

    return itemData
end

function BatchManager:GetItemId()
    return self._itemId
end

function BatchManager:GetItemCount()
    return self._itemCount
end

function BatchManager:GetButtonType()
    return self._buttonType
end

function BatchManager:Confirm(count)
    if self._buttonType == EItemButtonType.Use then
        LuaNetPackHandler.UseItemRequestResponse(self._itemId, count)
    else
        LuaNetStoreHandler.BuyItemRequestResponse(self._itemId, count)
    end
    local uiMgr = LuaGameManager.GetInstance():GetUIMgr()
    uiMgr:ClosePanel("BatchPanel",LuaUIPanelLevel.Top)
end
PackageManager = Class(function(self)
    self:Init()
end)

--private func
function PackageManager:DoReset()
    self:Init()
end

function PackageManager:DoDispose()
    self.PackData = nil
    self.PackData[EPackTabType.Common] = nil
	self.PackData[EPackTabType.Generals] = nil
	self.PackData[EPackTabType.Material] = nil
    self.PackData[EPackTabType.Consume] = nil
    
    self._packType = nil
    self._selectItemIndex = nil
end

function PackageManager:Init()
    self.PackData = {}
    self.PackData[EPackTabType.Common] = {}
	self.PackData[EPackTabType.Generals] = {}
	self.PackData[EPackTabType.Material] = {}
    self.PackData[EPackTabType.Consume] = {}
    
    self._packType = EPackTabType.Common
    self._selectItemIndex = 0
end

--public func
function PackageManager:GetIndexData()
    local typeData = self:GetPackDataByType(self._packType)
    if typeData and typeData[self._selectItemIndex] then
        return typeData[self._selectItemIndex]
    end

	return nil
end

function PackageManager:GetItemData(itemData)
    local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
    local data = configMgr:GetDataByNameAndID("Item",itemData.id)
    if data then
        return data
    end
    return nil
end

--是否可以使用
function PackageManager:isCanUse(itemData)
    local data = self:GetItemData(itemData)
    if data and data.canuse == EitemUseType.Reward  then
         return true
    else
        print("当前物品不可使用")
    end
end

--是否可以出售
function PackageManager:isCanSell(itemData)
    local data = self:GetItemData(itemData)
    if data and data.sellnumber > 0  then
         return true
    else
        print("当前物品不可出售")
    end
end

--是否为批量
function PackageManager:isCanBatch(itemData)
    local data = self:GetItemData(itemData)
    if data and itemData.count > 1 and data.muluse ~= 0 then
        return true
    end
    return false
end

--是否为多奖励
function PackageManager:isCanMultiReward(itemData)
    local data = self:GetItemData(itemData)
    if data and data.type == EItemMianType.MultipleTREASURE_TYPE then
        return true
    end
    return false
end

function PackageManager:GetItemDataById(itemId)
    if not itemId then
        return
    end
    local packData = self.PackData[EPackTabType.Common]
    if not packData or #packData <0 then
        return nil
    end
    for _,v in pairs(packData) do
        if v and v:GetItemId() == itemId then
            return v
        end
    end
    return nil
end

function PackageManager:GetSelectItemIndex()
    return self._selectItemIndex
end

function PackageManager:SetSelectItemIndex(value)
    self._selectItemIndex = value
end

function PackageManager:GetPackType()
    return self._packType or EPackTabType.Common
end

function PackageManager:SetPackType(type)
    self._packType = type
end

function PackageManager:GetPackDataByType(type)
    if not type then
        return nil
    end

    local modelMgr = LuaGameManager.GetInstance():GetModelMgr()
    local packData = modelMgr:GetDataByKeys("bag","bagMap")
    if not packData then
        return nil
    end
    local typeData = {}
    for k,v in pairs(packData) do
        if v ~= nil then
            if self:IsNotPackItem(k) then
                local dType = self:GetPackTabTypeById(k)
                if dType == type then
                    local itemData = {}
                    itemData.id = k
                    itemData.count = math.floor(v.count)
                    table.insert(typeData,itemData)
                end
            end
        end
    end

    local sortFunc = function(a,b)
        local aId = a.id
        local bId = b.id
        local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
        local aData = configMgr:GetDataByNameAndID("Item",aId)
        local bData = configMgr:GetDataByNameAndID("Item",bId)

        if aData.sort ~= bData.sort then
            return aData.sort > bData.sort
        else
            return aId > bId
        end
    end
    table.sort(typeData,sortFunc)

    --对显示列表进行排序
	-- table.sort( typeData, PackageManager.SortItemList )

    return typeData
end

---排序函数
function PackageManager.SortItemList( a, b )
    local aId = a.id
    local bId = b.id
    local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
    local aData = configMgr:GetDataByNameAndID("Item",aId)
    local bData = configMgr:GetDataByNameAndID("Item",bId)

	--根据填写的order
	if a.config.Order < b.config.Order then
		return true
	elseif a.config.Order > b.config.Order then
		return false
	end
	--物品的类型
	if a.config.Type < b.config.Type then
		return true
	elseif a.config.Type > b.config.Type then
		return false
	end
	--物品品质
	if a.config.Quality > b.config.Quality then
		return true
	elseif a.config.Quality < b.config.Quality then
		return false
	end
	--物品id
	if a.config.id < b.config.id then
		return true
	elseif a.config.id > b.config.id then
		return false
	end
	--物品个数
	if a.itemnum > b.itemnum then
		return true
	else
		return false
	end
end

--receive server data
function PackageManager:OnReceivePackDataOnLogin(packData)
    self:UpdatePackData(packData)
end

function PackageManager:OnReceivePackData(packData)
    -- print ("OnReceivePackDat")
    self:UpdatePackData(packData)
    EventAction.UpdatePackData:Do()
end


function PackageManager:IsNotPackItem(itemId)
    local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
    local data = configMgr:GetDataByNameAndID("Item", itemId)
    if data and data.subtype ~= EItemSecondaryType.CurrencyOrSweepReel then
        return true
    end
    return false
end

function PackageManager:AddItem(itemId,itemCount)
    local type = self:GetPackTabTypeById(itemId)
    self:AddItemToTabType(type,itemId,itemCount)
end

function PackageManager:AddItemToTabType(type,itemId,itemCount)
    local tabList = self.PackData[type]
    if not tabList then
        self.PackData[type] = {}
        tabList = self.PackData[type]
    end

    local exist = false
    for i=1,#tabList do
        local item = tabList[i]
        if item and item:GetItemId() == itemId then
            exist = true
            local itemClass = ItemClass()
            itemClass:SetItemId(itemId)
            itemClass:SetNum(itemCount)
            tabList[i] = itemClass
            break
        end
    end

    if not exist then
        local itemClass = ItemClass()
        itemClass:SetItemId(itemId)
        itemClass:SetNum(itemCount)
        table.insert(tabList,itemClass)
    end
end

function PackageManager:RemoveItem(itemId)
    local type = self:GetPackTabTypeById(itemId)
    self:RemoveItemFromTabType(type,itemId)
end

function PackageManager:RemoveItemFromTabType(type,itemId)
    local tabList = self.PackData[type]
    if not tabList or #tabList <=0 then
        return
    end
    for i=#tabList,1,-1 do
        local item = tabList[i]
        if item and item:GetItemId() == itemId then
            table.remove(tabList,i)
            break
        end
    end
end

--bag":{
    --"bagMap":{
        --"100002":{"dataConfigId":"20","itemId":"100002","visible":false,"lastChangeTime":1544611340625,"count":85},
        --"100003":{"itemId":"100003","visible":false,"count":0},
        --"100005":{"itemId":"100005","visible":false,"count":740000},
        --"101001":{"itemId":"101001","visible":true,"count":10},
        --"100008":{"itemId":"100008","visible":false,"count":0}
    --}
--},

function PackageManager:GetPackTabTypeById(itemId)
    return EPackTabType.Common
end

--package item class
ItemClass = Class(function(self)
    self._itemId = 0
    self._num = 0
end)

function ItemClass:GetItemId()
    return self._itemId
end

function ItemClass:SetItemId(value)
    self._itemId = value
end

function ItemClass:GetNum()
    return math.floor(self._num)
end

function ItemClass:SetNum(value)
    self._num = value
end


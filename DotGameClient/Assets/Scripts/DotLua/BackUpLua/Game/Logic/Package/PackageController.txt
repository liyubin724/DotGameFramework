
PackageController = Class(function(self)
	self.packMgr = LuaGameManager.GetInstance():GetLogicMgr():GetPackMgr()
end)

function PackageController:DoAwake()
	self.tabs = {}
	self.tabs[EPackTabType.Common] = self.toggle0
	self.tabs[EPackTabType.Generals] = self.toggle1
	self.tabs[EPackTabType.Material] = self.toggle2
	self.tabs[EPackTabType.Consume] = self.toggle3

	self.toggleHandlers = {}
	self.toggleHandlers[EPackTabType.Common] = self.OnClickCommon
	self.toggleHandlers[EPackTabType.Generals] = self.OnClickGenerals
	self.toggleHandlers[EPackTabType.Material] = self.OnClickMaterial
	self.toggleHandlers[EPackTabType.Consume] = self.OnClickConsume

	LuaGameManager.GetInstance():GetEventMgr():Register(GameModelEventID.bag.bagMap.EventID,CallbackData(self,self.RefreshPanelData))
	LuaGameManager.GetInstance():GetEventMgr():Register(GameEventID.GE_UPDATE_SELECT_ITEM_DATA,CallbackData(self,self.UpdatePanel))
	self:InitPanel()
end

function PackageController:DoStart()
	self:SelectTabByType(self.packMgr:GetPackType())
end

function PackageController:DoEnable(data)

end

function PackageController:DoDestroy()
	LuaGameManager.GetInstance():GetEventMgr():Unregister(GameModelEventID.bag.bagMap.EventID,CallbackData(self,self.RefreshPanelData))
	LuaGameManager.GetInstance():GetEventMgr():Unregister(GameEventID.GE_UPDATE_SELECT_ITEM_DATA,CallbackData(self,self.UpdatePanel))
end

function PackageController:InitPanel()
	if self.icon_name then
		self.icon_name.gameObject:SetActive(false)
	end
	if self.icon_number then
		self.icon_number.gameObject:SetActive(false)
	end
	if self.desc then
		self.desc.gameObject:SetActive(false)
	end
end

function PackageController:UpdatePanel()
	self.btn_use:SetActive(false)
	self.btn_sale:SetActive(false)
	self.compound_btn:SetActive(false)

	local indexData = self.packMgr:GetIndexData()
	local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
	local itemData = configMgr:GetDataByNameAndID("Item",indexData.id)
	if itemData then
		if self.rightObj then
			self.rightObj:SetActive(true)
		end
		if self.icon_name then
			if self.icon_name.gameObject.activeInHierarchy == false then
				self.icon_name.gameObject:SetActive(true)
			end
			self.icon_name.text = itemData.name
		end
		if self.class then
			self.class.gameObject:SetActive(true)
			self.class.SpriteName = EPropsClassTex[itemData.quality]
		end
		if self.desc then
			self.desc.gameObject:SetActive(true)
			self.desc.text = itemData.desc
		end
		if self.icon then
			self.icon.gameObject:SetActive(true)
			local iconPath = string.format(GameConstValue.IconImagePrePath,itemData.icon)
			self.icon.RawImagePath = iconPath
		end
		if self.icon_number then
			self.icon_number.gameObject:SetActive(true)
			self.icon_number.text = indexData.count..""
		end
		if itemData.buttonType then
			for _, value in pairs(itemData.buttonType) do
				if value == EItemButtonType.Use then
					self.btn_use:SetActive(true)
				elseif value == EItemButtonType.Sell then
					self.btn_sale:SetActive(true)
				elseif value == EItemButtonType.Compound then
					self.compound_btn:SetActive(true)
				end
			end
		end
	else
		if self.rightObj then
			self.rightObj:SetActive(false)
		end
	end
end

function PackageController:SelectTabByType(packType)
	local tab = self.tabs[packType]
	if tab then
		if tab.isOn == true then
			local handle = self.toggleHandlers[packType]
			if handle then
				handle(self)
			end
		else
			tab.isOn = true
		end
	end
end

function PackageController:OnClickCommon()
    self:ChangeTab(EPackTabType.Common)
end

function PackageController:OnClickGenerals()
    self:ChangeTab(EPackTabType.Generals)
end

function PackageController:OnClickMaterial()
    self:ChangeTab(EPackTabType.Material)
end

function PackageController:OnClickConsume()
	self:ChangeTab(EPackTabType.Consume)
	

end

function PackageController:ChangeTab(type)
	print ("PackageController->ChangeTab :"..type)
	self.packMgr:SetPackType(type)
	self:RefreshPackData()
end

function PackageController:RefreshPanelData()
	self:RefreshPackData()
	self:UpdatePanel()
end

function PackageController:RefreshPackData()
	if self.scrollController then
		print ("RefreshPackData->")
		if self.rightObj then
			self.rightObj:SetActive(false)
		end
		local packType = self.packMgr:GetPackType() or EPackTabType.Common
		self.scrollController:SetScrollItemData(packType)
	end
end

function PackageController:OnClickPanel()
	local uiMgr = LuaGameManager.GetInstance():GetUIMgr()
    uiMgr:ClosePanel("PackPanel",LuaUIPanelLevel.Default)
end

--合并
function PackageController:OnClickCompound()
	local indexData = self.packMgr:GetIndexData()
	if not indexData then
		return
	end
	print("OnClickUse",  indexData)
	LuaGameManager.GetInstance():GetLogicMgr():GetCompoundMgr():OnReceiveData(indexData.id, indexData.count)
end

--使用
function PackageController:OnClickUse()
	local indexData = self.packMgr:GetIndexData()
	if not indexData then
		return
	end
	print("OnClickUse",  indexData.id)
	if not self.packMgr:isCanUse(indexData) then
		return
	end

	if self.packMgr:isCanMultiReward(indexData) then
		LuaGameManager.GetInstance():GetLogicMgr():GetSelectreWardMgr():InitData(indexData.id, indexData.count)
	elseif self.packMgr:isCanBatch(indexData) then
		LuaGameManager.GetInstance():GetLogicMgr():GetBatchMgr():InitData(indexData.id, indexData.count, EItemButtonType.Use)
	else
		LuaNetPackHandler.UseItemRequestResponse(indexData.id)
	end
end

--出售
function PackageController:OnClickSale()
	local indexData = self.packMgr:GetIndexData()
	if not indexData then
		return
	end
	print("OnClickSale", indexData.id)
	if not self.packMgr:isCanSell(indexData) then
		return
	end
	if self.packMgr:isCanBatch(indexData) then
		LuaGameManager.GetInstance():GetLogicMgr():GetBatchMgr():InitData(indexData.id, indexData.count, EItemButtonType.Sell)
	else
		local callBack = function()
			local confirmMgr = LuaGameManager.GetInstance():GetLogicMgr():GetConfirmMgr()
			local saleId = confirmMgr:GetSaleItemId()
			local saleCount = confirmMgr:GetSaleAmount()
			
			LuaNetPackHandler.SaleItemRequestResponse(saleId,saleCount)
		end
		
		local confirmMgr = LuaGameManager.GetInstance():GetLogicMgr():GetConfirmMgr()
		confirmMgr:OnReceiveData(indexData.id,1,callBack)
	end
end
StoreManager = Class(function(self)
    self.shopData = {}
    self._shopType = EStoreType.One
end)

--public func
function StoreManager:GetShopType()
    return self._shopType or EStoreType.One
end

function StoreManager:SetShopType(type)
    self._shopType = type
    local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
    self.shopConfig = configMgr:GetDataByNameAndID("ShopConfig", self._shopType)
end

function StoreManager: GetShopDataByModelMgr()
    local modelMgr = LuaGameManager.GetInstance():GetModelMgr()
    local shopData = modelMgr:GetDataByKeys("shopMap")
    if shopData then
        self.shopData =  shopData[tostring(self._shopType)]
    end
end

--receive server data
function StoreManager:OnReceiveStoreData()
    self:GetShopDataByModelMgr()
    LuaGameManager.GetInstance():GetEventMgr():Trigger(GameEventID.GE_UPDATE_STORE_DATA)
end

function StoreManager:GetShopCurrencyId( )
    if self.shopConfig and self.shopConfig.currency then
        return self.shopConfig.currency
    end
    return nil
end

--消耗类型
function StoreManager:GetCurrencyData( )
    if self.shopConfig and self.shopConfig.currencyShow then
        local configMgr = LuaGameManager.GetInstance():GetConfigMgr()
        local itemData = configMgr:GetDataByNameAndID("Item", tostring(self.shopConfig.currencyShow))
        if itemData then
            return itemData
        end
    end
    return nil
end

--是否可以刷新
function StoreManager:isCanShopRefresh( )
    if self.shopConfig and self.shopConfig.refreshMax then
        if self:GetShopRefreshNum( ) > self.shopConfig.refreshMax then
            return true
        end
    end
    return false
end

--刷新价格
function StoreManager:GetShopRefreshPrice( )
    if self.shopConfig.price[self:GetShopRefreshNum() + 1] then
        return self.shopConfig.price[self:GetShopRefreshNum() + 1]
    end
    return 0
end

--刷新次数
function StoreManager:GetShopRefreshNum( )
    return math.floor( self.shopData.refreshNum )
end

--获取item数据
function StoreManager:GetShopDataByGrid( gridId )
    if self.shopData and self.shopData.gridMap then
        return self.shopData.gridMap[tostring(gridId)]
    end
    return 0
end